const express = require('express');
const fetch = require('node-fetch');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

const API_KEY = process.env.GEMINI_API_KEY;

// Check if API key is present
if (!API_KEY) {
  console.error("GEMINI_API_KEY is not set. Please create a .env file and add your key.");
  process.exit(1);
}

app.post('/analyze-match', async (req, res) => {
  const { homeTeam, awayTeam } = req.body;

  if (!homeTeam || !awayTeam) {
    return res.status(400).json({ error: 'Home team and away team are required.' });
  }

  // A more detailed, "supercharged" prompt
  const prompt = `Act as an elite football match analyst. Analyze an upcoming football fixture between ${homeTeam} and ${awayTeam}. Provide a comprehensive, data-driven analysis by considering the following variables:

- **Recent Team Form:** Analyze the last 5-10 matches for each team.
- **Head-to-Head Records:** Consider historical results between the two teams.
- **Player-Specifics:** Report on key player injuries, suspensions, or returns from injury. Also, consider the individual form of star players.
- **Statistical Performance Metrics:** Look at key statistics such as goals scored, goals conceded, expected goals (xG), and defensive efficiency.
- **Tactical Analysis:** Evaluate the typical formations and playing styles of both teams (e.g., possession-based, counter-attacking, high-press) and how they might match up.
- **Home-Field Advantage:** Consider the impact of playing at home for ${homeTeam}.
- **Match Importance:** Factor in the context of the match (e.g., a critical league game, a cup final, or a friendly).
- **Managerial Impact:** Note any recent managerial changes or tactical shifts.
- **External Factors:** Briefly consider potential impacts like weather or pitch conditions if relevant.

Synthesize this information into a concise prediction, a betting recommendation, and a confidence score.

Provide the response in a JSON format with the following keys:
{
  "prediction": "string",
  "bettingRecommendation": "string",
  "confidence": "string"
}

Example format:
{
  "prediction": "${homeTeam} to win 2-1",
  "bettingRecommendation": "Bet on 'Over 2.5 goals'",
  "confidence": "High (8/10)"
}
`;

  try {
    const payload = {
      contents: [{
        parts: [{ text: prompt }]
      }],
      generationConfig: {
        responseMimeType: "application/json",
      },
    };

    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
    
    // Implement exponential backoff for API calls
    let response;
    let attempts = 0;
    const maxRetries = 5;
    const initialDelay = 1000; // 1 second

    while (attempts < maxRetries) {
      try {
        response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          break; // Exit the loop if the request was successful
        }
      } catch (error) {
        // Log error but don't re-throw to allow for retries
        console.error(`Fetch attempt ${attempts + 1} failed:`, error);
      }

      attempts++;
      const delay = initialDelay * Math.pow(2, attempts - 1);
      if (attempts < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        throw new Error('All API fetch attempts failed.');
      }
    }

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    const result = await response.json();
    const generatedContent = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (generatedContent) {
      const parsedContent = JSON.parse(generatedContent);
      res.json(parsedContent);
    } else {
      throw new Error('No content was generated by the API.');
    }
  } catch (error) {
    console.error("Error analyzing match:", error);
    res.status(500).json({ error: 'Failed to get a prediction. Please try again.' });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
    
